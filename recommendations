Исхожу из того, что выбранные технологии - это явное ограничение из ТЗ. Если нет - есть смысл посмотреть в сторону инструментов Hibernate, MyBatis, QueryDSL, jOOK
Если не используется dependency injection и если нет нескольких реализаций, то нет смысла создавать интерфейсы (Reader, Writer), а потом явно создавать реализации. Либо - надо делать это везде, чтобы все компоненты программы общались друг с другом через интерфейсы. Но зачем?
Всевозможные Reader'ы Input\OutputStream, подключения к БД - очень важно закрывать после использования. На каждый такой объект выделяются аппартаные ресурсы операционной системы, а их число - конечно.
Переменныяе (даже final) в Java пишутся camelCase'ом. Константы (static final) - CAP_SNAKE_CASE'ом.
Брать в кавычки поля и таблицы в SQL-запросах не нужно - это сильно засоряет код.
